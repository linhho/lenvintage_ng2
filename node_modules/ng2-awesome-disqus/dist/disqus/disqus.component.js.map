{"version":3,"sources":["../src/disqus/disqus.component.ts"],"names":["core_1","require","Disqus","el","renderer","this","prototype","ngAfterViewInit","undefined","window","DISQUS","addScriptTag","reset","reload","config","getConfig","disqus_config","script","createElement","nativeElement","src","shortname","async","type","setAttribute","Date","getTime","toString","_self","page","url","location","href","identifier","category_id","categoryId","language","lang","ngOnDestroy","removeOnDestroy","__decorate","Input","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","exports"],"mappings":"sgBAAAA,OAAAC,QAAwG,iBAQxGC,OAAA,WAaE,QAAAA,GAAoBC,EAAwBC,GAAxBC,KAAAF,GAAAA,EAAwBE,KAAAD,SAAAA,EAsD9C,MAnDEF,GAAAI,UAAAC,gBAAA,WAC+BC,SAAnBC,OAAQC,OAChBL,KAAKM,eAGLN,KAAKO,SAOTV,EAAAI,UAAAM,MAAA,WACQH,OAAQC,OAAOE,OACnBC,QAAQ,EACRC,OAAQT,KAAKU,eAOjBb,EAAAI,UAAAK,aAAA,WACQF,OAAQO,cAAgBX,KAAKU,WAEnC,IAAIE,GAASZ,KAAKD,SAASc,cAAcb,KAAKF,GAAGgB,cAAe,SAChEF,GAAOG,IAAM,KAAKf,KAAKgB,UAAS,uBAChCJ,EAAOK,OAAQ,EACfL,EAAOM,KAAO,kBACdN,EAAOO,aAAa,kBAAkB,GAAIC,OAAOC,UAAUC,aAM7DzB,EAAAI,UAAAS,UAAA,WACE,GAAIa,GAAQvB,IACZ,OAAO,YACLA,KAAKwB,KAAKC,IAAMzB,KAAKyB,KAAOrB,OAAOsB,SAASC,KAC5C3B,KAAKwB,KAAKI,WAAaL,EAAMK,WAC7B5B,KAAKwB,KAAKK,YAAc7B,KAAK8B,WAC7B9B,KAAK+B,SAAW/B,KAAKgC,OAIzBnC,EAAAI,UAAAgC,YAAA,WACKjC,KAAKkC,kBACA9B,OAAQC,OAASF,SA7D3BgC,YAACxC,OAAAyC,2EACDD,YAACxC,OAAAyC,0EACDD,YAACxC,OAAAyC,oEACDD,YAACxC,OAAAyC,2EACDD,YAACxC,OAAAyC,qEAKDD,YAACxC,OAAAyC,iFAjBHvC,EAAAsC,YAACxC,OAAA0C,WACCC,SAAU,SACVC,SAAU,iCACVC,gBAAiB7C,OAAA8C,wBAAwBC,mFAG9BC,SAAA9C,OAAMA","file":"disqus.component.js","sourcesContent":["import {Component, Input, ElementRef, AfterViewInit, OnDestroy, Renderer, ChangeDetectionStrategy} from '@angular/core';\n\n@Component({\n  selector: 'disqus',\n  template: '<div id=\"disqus_thread\"></div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class Disqus implements AfterViewInit, OnDestroy {\n\n  @Input() public identifier: string;\n  @Input() public shortname: string;\n  @Input() public url: string;\n  @Input() public categoryId: string;\n  @Input() public lang: string;\n\n  /** Remove DISQUS script on destroy\n   *  This is useful to let DISQUS change its theme according if the page background color changed.\n   */\n  @Input() public removeOnDestroy: boolean;\n\n  constructor(private el: ElementRef, private renderer: Renderer) {\n  }\n\n  ngAfterViewInit() {\n    if ((<any>window).DISQUS === undefined) {\n      this.addScriptTag();\n    }\n    else {\n      this.reset();\n    }\n  }\n\n  /**\n   * Reset disqus with new inputs.\n   */\n  reset() {\n    (<any>window).DISQUS.reset({\n      reload: true,\n      config: this.getConfig()\n    });\n  }\n\n  /**\n   * Add disqus script to the document.\n   */\n  addScriptTag() {\n    (<any>window).disqus_config = this.getConfig();\n\n    let script = this.renderer.createElement(this.el.nativeElement, 'script');\n    script.src = `//${this.shortname}.disqus.com/embed.js`;\n    script.async = true;\n    script.type = 'text/javascript';\n    script.setAttribute('data-timestamp', new Date().getTime().toString());\n  }\n\n  /**\n   * Get disqus config\n   */\n  getConfig() {\n    let _self = this;\n    return function () {\n      this.page.url = this.url || window.location.href;\n      this.page.identifier = _self.identifier;\n      this.page.category_id = this.categoryId;\n      this.language = this.lang;\n    };\n  }\n\n  ngOnDestroy() {\n    if(this.removeOnDestroy){\n      (<any>window).DISQUS = undefined;\n    }\n  }\n\n}\n"]}